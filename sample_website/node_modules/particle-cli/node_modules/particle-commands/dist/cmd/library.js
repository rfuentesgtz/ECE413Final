'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.libraryTestResources = libraryTestResources;
exports.findProject = findProject;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _particleLibraryManager = require('particle-library-manager');

var _library_properties = require('./library_properties');

var _library_properties2 = _interopRequireDefault(_library_properties);

var _project_properties = require('./project_properties');

var _project_properties2 = _interopRequireDefault(_project_properties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function libraryTestResources() {
	return _path2.default.join((0, _particleLibraryManager.resourcesDir)(), 'libraries');
}

function findProject(directory) {
	var mustExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	var libraryProperties = new _library_properties2.default(directory);
	var projectProperties = new _project_properties2.default(directory);

	return projectProperties.exists().then(function (exists) {
		if (exists) {
			return projectProperties;
		} else {
			return libraryProperties.exists().then(function (exists) {
				if (!exists && mustExist) {
					throw new Error('Project or library not found in directory ' + directory);
				}
				return exists ? libraryProperties : null;
			});
		}
	});
}