'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.LibraryAddCommand = exports.LibraryAddCommandSite = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _pipeline = require('when/pipeline');

var _pipeline2 = _interopRequireDefault(_pipeline);

var _api = require('./api');

var _command = require('./command');

var _library = require('./library');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LibraryAddCommandSite = exports.LibraryAddCommandSite = function (_CommandSite) {
	_inherits(LibraryAddCommandSite, _CommandSite);

	function LibraryAddCommandSite() {
		_classCallCheck(this, LibraryAddCommandSite);

		return _possibleConstructorReturn(this, (LibraryAddCommandSite.__proto__ || Object.getPrototypeOf(LibraryAddCommandSite)).apply(this, arguments));
	}

	_createClass(LibraryAddCommandSite, [{
		key: 'apiClient',
		value: function apiClient() {
			throw new Error('not implemented');
		}
	}, {
		key: 'projectDir',
		value: function projectDir() {
			throw new Error('not implemented');
		}
	}, {
		key: 'libraryIdent',
		value: function libraryIdent() {
			throw new Error('not implemented');
		}
	}, {
		key: 'fetchingLibrary',
		value: function fetchingLibrary(promise, name) {
			return promise;
		}
	}, {
		key: 'addedLibrary',
		value: function addedLibrary(name, version) {}
	}]);

	return LibraryAddCommandSite;
}(_command.CommandSite);

/** Library add **/


var LibraryAddCommand = exports.LibraryAddCommand = function () {
	function LibraryAddCommand() {
		_classCallCheck(this, LibraryAddCommand);
	}

	_createClass(LibraryAddCommand, [{
		key: 'run',


		/**
   * @param {Object} state Unused
   * @param {LibraryAddCommandSite} site Provides the parameters for the command.
   * @returns {Promise} Library add process
   */
		value: function run(state, site) {
			var _this2 = this;

			this.site = site;

			var lib = site.libraryIdent();
			if (lib.version === undefined) {
				lib.version = 'latest';
			}
			var directory = this.site.projectDir();
			return (0, _pipeline2.default)([function () {
				return _this2.ensureProjectExists(directory);
			}, function () {
				return _this2.loadProject();
			}, function () {
				return _this2.fetchLibrary(lib.name, lib.version);
			}, function (library) {
				return _this2.addLibraryToProject(library);
			}, function () {
				return _this2.saveProject();
			}]);
		}
	}, {
		key: 'ensureProjectExists',
		value: function ensureProjectExists(directory) {
			var _this3 = this;

			return (0, _library.findProject)(directory, true).then(function (project) {
				_this3.properties = project;
				return project;
			});
		}
	}, {
		key: 'createProject',
		value: function createProject() {
			// save a blank project.properties
			return this.properties.save();
		}
	}, {
		key: 'loadProject',
		value: function loadProject() {
			return this.properties.load();
		}
	}, {
		key: 'fetchLibrary',
		value: function fetchLibrary(name, version) {
			var _this4 = this;

			return Promise.resolve(this.site.apiClient()).then(function (apiClient) {
				return Promise.resolve(_this4.site.fetchingLibrary(apiClient.library(name, { version: version }), name, version));
			}).catch(function (err) {
				throw _this4.apiError(err);
			});
		}
	}, {
		key: 'apiError',
		value: function apiError(err) {
			return (0, _api.convertApiError)(err);
		}
	}, {
		key: 'addLibraryToProject',
		value: function addLibraryToProject(library) {
			var _this5 = this;

			return (0, _pipeline2.default)([function () {
				return _this5.site.addedLibrary(library.name, library.version);
			}, function () {
				return _this5.properties.addDependency(library.name, library.version);
			}]);
		}
	}, {
		key: 'saveProject',
		value: function saveProject() {
			return this.properties.save();
		}
	}]);

	return LibraryAddCommand;
}();