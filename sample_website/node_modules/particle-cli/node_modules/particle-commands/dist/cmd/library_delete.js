'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.LibraryDeleteCommand = exports.LibraryDeleteCommandSite = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _command = require('./command');

var _api = require('./api');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Specification and base implementation for the site instance expected by
 * the LibraryDeleteCommand.
 */
var LibraryDeleteCommandSite = exports.LibraryDeleteCommandSite = function (_CommandSite) {
	_inherits(LibraryDeleteCommandSite, _CommandSite);

	function LibraryDeleteCommandSite() {
		_classCallCheck(this, LibraryDeleteCommandSite);

		return _possibleConstructorReturn(this, (LibraryDeleteCommandSite.__proto__ || Object.getPrototypeOf(LibraryDeleteCommandSite)).call(this));
	}

	_createClass(LibraryDeleteCommandSite, [{
		key: 'apiClient',
		value: function apiClient() {
			throw new Error('apiClient not available');
		}
	}, {
		key: 'libraryIdent',
		value: function libraryIdent() {
			throw new Error('search string not available');
		}

		/**
   * Notifies the site that the command is about to retrieve the libraries.
   * @param {Promise}promise   The command to retrieve the libraries.
   * @param {string}libraryIdent     the identifier of the library being deleted
   * @return {Promise} to list libraries
   */

	}, {
		key: 'notifyStart',
		value: function notifyStart(promise, libraryIdent) {
			return promise;
		}
	}, {
		key: 'notifyComplete',
		value: function notifyComplete(promise, result, error) {
			if (error) {
				throw error;
			}
		}
	}]);

	return LibraryDeleteCommandSite;
}(_command.CommandSite);

/**
 * Implements the library delete command.
 */


var LibraryDeleteCommand = exports.LibraryDeleteCommand = function (_Command) {
	_inherits(LibraryDeleteCommand, _Command);

	function LibraryDeleteCommand() {
		_classCallCheck(this, LibraryDeleteCommand);

		return _possibleConstructorReturn(this, (LibraryDeleteCommand.__proto__ || Object.getPrototypeOf(LibraryDeleteCommand)).apply(this, arguments));
	}

	_createClass(LibraryDeleteCommand, [{
		key: 'deleteLibrary',


		/**
   * A request to delete the library matching the given name. (In future name@version might be supported too.)
   * @param {LibraryDeleteCommandSite} site Provides the parameters for the command
   * @param {string} name The name of the library to delete
   * @returns {Promise} to delete library.
   *
   * The site methods notifyListLibrariesStart/notifyListLibrariesComplete are called
   * at the start and end of the operation.
   */
		value: function deleteLibrary(site, name) {
			var _this3 = this;

			this.site = site;
			var force = process.env.PARTICLE_LIBRARY_DELETE_TOKEN;
			if (!force) {
				return Promise.reject('PARTICLE_LIBRARY_DELETE_TOKEN should be defined to enable library delete functionality.');
			}

			return Promise.resolve(this.site.apiClient()).then(function (apiClient) {

				var searchPromise = apiClient.libraries({ filter: name });

				var deletePromise = apiClient.deleteLibrary({ name: name, force: force });

				var promise = searchPromise.then(function (libraries) {
					if (libraries.length) {
						return deletePromise;
					}
				}).catch(function (err) {
					var result = _this3.apiError(err);
					throw result;
				});

				// todo - this delete command and the search command have a similar structure so try to factor out the
				// common flow.

				return Promise.resolve(_this3.site.notifyStart(promise, name).then(function () {
					_this3.site.notifyComplete(promise, name, null);
				}).catch(function (err) {
					_this3.site.notifyComplete(promise, null, err);
					throw err;
				}));
			});
		}
	}, {
		key: 'apiError',
		value: function apiError(err) {
			return (0, _api.convertApiError)(err);
		}

		/**
   *
   * @param {object} state The current conversation state.
   * @param {LibraryDeleteCommandSite} site external services.
   * @returns {Promise} To run the library delete command.
   */

	}, {
		key: 'run',
		value: function run(state, site) {
			var _this4 = this;

			return Promise.resolve(site.libraryIdent()).then(function (ident) {
				return _this4.deleteLibrary(site, ident);
			});
		}
	}]);

	return LibraryDeleteCommand;
}(_command.Command);