'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.extended = exports.simple = exports.legacy = undefined;

var _project_properties = require('./project_properties');

Object.defineProperty(exports, 'legacy', {
	enumerable: true,
	get: function get() {
		return _project_properties.legacy;
	}
});
Object.defineProperty(exports, 'simple', {
	enumerable: true,
	get: function get() {
		return _project_properties.simple;
	}
});
Object.defineProperty(exports, 'extended', {
	enumerable: true,
	get: function get() {
		return _project_properties.extended;
	}
});

var _project_properties2 = _interopRequireDefault(_project_properties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LibraryProperties = function (_ProjectProperties) {
	_inherits(LibraryProperties, _ProjectProperties);

	function LibraryProperties(dir) {
		var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
		    _ref$filename = _ref.filename,
		    filename = _ref$filename === undefined ? 'library.properties' : _ref$filename;

		_classCallCheck(this, LibraryProperties);

		return _possibleConstructorReturn(this, (LibraryProperties.__proto__ || Object.getPrototypeOf(LibraryProperties)).call(this, dir, { filename: filename }));
	}

	return LibraryProperties;
}(_project_properties2.default);

exports.default = LibraryProperties;