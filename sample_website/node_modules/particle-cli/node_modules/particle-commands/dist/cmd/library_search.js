'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.LibrarySearchCommand = exports.LibrarySearchCommandSite = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _command = require('./command');

var _api = require('./api');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Specification and base implementation for the site instance expected by
 * the LibrarySearchCommand.
 */
var LibrarySearchCommandSite = exports.LibrarySearchCommandSite = function (_CommandSite) {
	_inherits(LibrarySearchCommandSite, _CommandSite);

	function LibrarySearchCommandSite() {
		_classCallCheck(this, LibrarySearchCommandSite);

		return _possibleConstructorReturn(this, (LibrarySearchCommandSite.__proto__ || Object.getPrototypeOf(LibrarySearchCommandSite)).call(this));
	}

	_createClass(LibrarySearchCommandSite, [{
		key: 'apiClient',
		value: function apiClient() {
			throw new Error('apiClient not available');
		}
	}, {
		key: 'searchString',
		value: function searchString() {
			throw new Error('search string not available');
		}

		/**
   * Notifies the site that the command is about to retrieve the libraries.
   * @param {Promise}promise   The command to retrieve the libraries.
   * @param {string}filter     Optional
   * @return {Promise} to list libraries
   */

	}, {
		key: 'notifyListLibrariesStart',
		value: function notifyListLibrariesStart(promise, filter) {
			return promise;
		}
	}, {
		key: 'notifyListLibrariesComplete',
		value: function notifyListLibrariesComplete(promise, filter, libraries, error) {
			if (error) {
				throw error;
			}
		}
	}]);

	return LibrarySearchCommandSite;
}(_command.CommandSite);

/**
 * Implements the library search command.
 */


var LibrarySearchCommand = exports.LibrarySearchCommand = function (_Command) {
	_inherits(LibrarySearchCommand, _Command);

	function LibrarySearchCommand() {
		_classCallCheck(this, LibrarySearchCommand);

		return _possibleConstructorReturn(this, (LibrarySearchCommand.__proto__ || Object.getPrototypeOf(LibrarySearchCommand)).apply(this, arguments));
	}

	_createClass(LibrarySearchCommand, [{
		key: 'listLibraries',


		/**
   * A request to list the libraries using the given filter.
   * @param {LibraryAddCommandSite} site Provides the parameters for the command
   * @param {string} filter a filter for the library name
   * @returns {Promise} to fetch the libraries.
   *
   * The site methods notifyListLibrariesStart/notifyListLibrariesComplete are called
   * at the start and end of the operation.
   */
		value: function listLibraries(site, filter) {
			var _this3 = this;

			this.site = site;

			return Promise.resolve(this.site.apiClient()).then(function (apiClient) {
				var listPromise = apiClient.libraries({ filter: filter }).catch(function (err) {
					var result = _this3.apiError(err);
					throw result;
				});

				return Promise.resolve(_this3.site.notifyListLibrariesStart(listPromise, filter).then(function (libraries) {
					_this3.site.notifyListLibrariesComplete(listPromise, filter, libraries, null);
					return libraries;
				}).catch(function (err) {
					_this3.site.notifyListLibrariesComplete(listPromise, filter, null, err);
					throw err;
				}));
			});
		}
	}, {
		key: 'apiError',
		value: function apiError(err) {
			return (0, _api.convertApiError)(err);
		}

		/**
   *
   * @param {object} state The current conversation state.
   * @param {LibrarySearchCommandSite} site external services.
   * @returns {Promise} To run the library search command.
   */

	}, {
		key: 'run',
		value: function run(state, site) {
			var _this4 = this;

			return Promise.resolve(site.searchString()).then(function (filter) {
				return _this4.listLibraries(site, filter);
			});
		}
	}]);

	return LibrarySearchCommand;
}(_command.Command);