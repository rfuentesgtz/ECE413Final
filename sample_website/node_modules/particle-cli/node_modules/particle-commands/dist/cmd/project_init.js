'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ProjectInitCommand = exports.ProjectInitCommandSite = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _command = require('./command');

var _project_properties = require('./project_properties');

var _project_properties2 = _interopRequireDefault(_project_properties);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _particleLibraryManager = require('particle-library-manager');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var promisify = require('es6-promisify');

var underscore = require('underscore');

/**
 * Specification and base implementation for the site instance expected by
 * the ProjectInitCommand.
 */

var ProjectInitCommandSite = function (_CommandSite) {
	_inherits(ProjectInitCommandSite, _CommandSite);

	function ProjectInitCommandSite() {
		_classCallCheck(this, ProjectInitCommandSite);

		return _possibleConstructorReturn(this, (ProjectInitCommandSite.__proto__ || Object.getPrototypeOf(ProjectInitCommandSite)).apply(this, arguments));
	}

	_createClass(ProjectInitCommandSite, [{
		key: 'directory',


		/**
   * The directory where the project should be initialized.
   */
		value: function directory() {
			throw Error('not implemented');
		}

		/**
   * The name of the project to create. Should pass isValidName() in the command.
   */

	}, {
		key: 'name',
		value: function name() {
			throw Error('not implemented');
		}

		/**
   * The filesystem to use when creating files and directories.
   * @returns {*} The filesystem module to use.
   *
   * todo - document the functions required
   * - stat()
   * - readdir()
   * - writeFile
   */

	}, {
		key: 'filesystem',
		value: function filesystem() {
			return require('fs');
		}

		/**
   * Notification that the directory exists, should creation proceed?
   * @param {String} dir The directory that exists.
   * The response can be a direct value or a promise. If the promise is falsey then the process is stopped.
   */

	}, {
		key: 'notifyDirectoryExists',
		value: function notifyDirectoryExists(dir) {}

		/**
   * Notification of the entire project creation operation.
   * @param {String} path      The directory that will contain the project
   * @param {Promise} promise   The promise to create the project in the given directory
   */

	}, {
		key: 'notifyCreatingProject',
		value: function notifyCreatingProject(path, promise) {}

		/**
   * Notification that the command is creating a file or directory.
   * @param {String} path          The path being created
   * @param {Promise} promise       The promise to create the path. The implementation may
   * extend this promise and return the new extension. This may be undefined also.
   * @return {undefined|Promise} undefined to use the original promise, or a wrapped version of the promise.
   */

	}, {
		key: 'notifyCreatingPath',
		value: function notifyCreatingPath(path, promise) {
			return promise;
		}
	}, {
		key: 'notifyProjectNotCreated',
		value: function notifyProjectNotCreated(directory) {}
	}, {
		key: 'notifyProjectCreated',
		value: function notifyProjectCreated(directory) {}
	}, {
		key: 'error',
		value: function error(_error) {
			throw _error;
		}
	}]);

	return ProjectInitCommandSite;
}(_command.CommandSite);

/**
 * Implements the project initialization command.
 */


exports.ProjectInitCommandSite = ProjectInitCommandSite;

var ProjectInitCommand = exports.ProjectInitCommand = function (_Command) {
	_inherits(ProjectInitCommand, _Command);

	function ProjectInitCommand() {
		_classCallCheck(this, ProjectInitCommand);

		return _possibleConstructorReturn(this, (ProjectInitCommand.__proto__ || Object.getPrototypeOf(ProjectInitCommand)).apply(this, arguments));
	}

	_createClass(ProjectInitCommand, [{
		key: 'expandTemplate',
		value: function expandTemplate(fs, templateName, data) {
			var _this3 = this;

			var readFile = promisify(fs.readFile);
			return readFile(ProjectInitCommand.templateFile(templateName), 'utf-8').then(function (content) {
				return _this3.processTemplate(content, data);
			});
		}
	}, {
		key: 'processTemplate',
		value: function processTemplate(content, data) {
			return underscore.template(content)(data);
		}

		/**
   *
   * @param {string} name The name to validate
   * @returns {object} - key valid indicates if validation passed
   *                     key errors is an object with pairs of invalid field names and error messages
   */

	}, {
		key: 'validateName',
		value: function validateName(name) {
			return (0, _particleLibraryManager.validateField)('name', name);
		}

		/**
   *
   * @param {object} state The current conversation state.
   * @param {ProjectInitCommandSite} site external services.
   * @returns {Promise} To run the project initialization command.
   */

	}, {
		key: 'run',
		value: function run(state, site) {
			var _this4 = this;

			var directory = void 0,
			    filesystem = void 0,
			    name = void 0;

			return Promise.resolve().then(function () {
				return Promise.resolve(site.name());
			}).then(function (_name) {
				name = _name;
				var validate = _this4.validateName(name);
				if (!validate.valid) {
					throw new Error('name: ' + validate.errors.name);
				}
				return Promise.resolve(site.directory());
			}).then(function (_directory) {
				directory = _directory;
				if (directory) {
					return Promise.resolve(site.filesystem()).then(function (_filesystem) {
						filesystem = _filesystem;
						return _this4.canCreateInDirectory(site, filesystem, directory);
					}).then(function (create) {
						if (create) {
							var project = _this4.createProject(site, filesystem, directory, name);
							project = site.notifyCreatingProject(directory, project) || project;
							return project.then(function () {
								return site.notifyProjectCreated(directory);
							});
						} else {
							return site.notifyProjectNotCreated(directory);
						}
					}).catch(function (error) {
						site.error(error);
					});
				}
			});
		}
	}, {
		key: 'createDirectoryIfNeeded',
		value: function createDirectoryIfNeeded(fs, directory) {
			var mkdir = promisify(_mkdirp2.default);
			return mkdir(directory, { fs: fs }).then(function () {
				return true;
			}).catch(function (error) {
				if (!error.code || error.code !== 'EEXIST') {
					throw error;
				}
				return false;
			});
		}
	}, {
		key: 'createNotifyDirectory',
		value: function createNotifyDirectory(site, fs, directory) {
			return this.createDirectoryIfNeeded(fs, directory).then(function (created) {
				if (created) {
					return site.notifyCreatingPath(directory);
				}
			});
		}
	}, {
		key: 'createNotifyTemplateIfNeeded',
		value: function createNotifyTemplateIfNeeded(site, fs, targetFile, templateName, data) {
			// assumes the parent directory of the template exists
			var content = this.expandTemplate(fs, templateName, data);
			return this.createNotifyFileIfNeeded(site, fs, targetFile, content);
		}

		// todo - these file related functions could be factored out since they are not specifically to do with project
		// intiialization, and are reusable across commands that use the file system.

	}, {
		key: 'createFile',
		value: function createFile(fs, path, content) {
			var writeFile = promisify(fs.writeFile);
			return Promise.resolve(content).then(function (content) {
				return writeFile(path, content);
			});
		}
	}, {
		key: 'createNotifyFile',
		value: function createNotifyFile(site, fs, path, content) {
			var create = this.createFile(fs, path, content);
			create = site.notifyCreatingPath(path, create) || create;
			return create;
		}
	}, {
		key: 'createNotifyFileIfNeeded',
		value: function createNotifyFileIfNeeded(site, fs, path, content) {
			var _this5 = this;

			var stat = promisify(fs.stat);
			return stat(path).catch(function (error) {
				if (error.code !== 'ENOENT') {
					throw error;
				}
				return _this5.createNotifyFile(site, fs, path, content);
			});
		}
	}, {
		key: 'createProject',
		value: function createProject(site, fs, directory, name) {
			var _this6 = this;

			var properties = { name: name };
			var projectFile = _path2.default.join(directory, 'project.properties');
			var project = new _project_properties2.default(directory, { fs: _project_properties2.default.buildFs(fs) });
			return this.createNotifyDirectory(site, fs, directory).then(function () {
				return _this6.createNotifyDirectory(site, fs, _path2.default.join(directory, 'src'));
			}).then(function () {
				return _this6.createNotifyFileIfNeeded(site, fs, projectFile, '');
			}).then(function () {
				return _this6.createNotifyTemplateIfNeeded(site, fs, _path2.default.join(directory, 'README.md'), 'README.md', properties);
			}).then(function () {
				return _this6.createNotifyTemplateIfNeeded(site, fs, _path2.default.join(directory, 'src', name + '.ino'), 'project.ino', properties);
			}).then(function () {
				return project.load();
			}).then(function () {
				if (project.setField('name', name)) {
					return project.save();
				}
			});
		}

		/**
   * Determines if we can create the project in the specified directory.
   * @param {ProjectInitCommandSite} site The interaction site for this command
   * @param {Object} fs           The filesystem to use to check for the presence of a directory.
   * @param {String} directory    The directory to check
   * @returns {Promise}           resolves to a truthy value to continue creating the project.
   */

	}, {
		key: 'canCreateInDirectory',
		value: function canCreateInDirectory(site, fs, directory) {
			var _this7 = this;

			var stat = promisify(fs.stat);
			return stat(directory).then(function (stat) {
				if (!stat.isDirectory()) {
					return false; // exists but is not a directory
				} else {
					return _this7._checkDirectoryIsEmpty(site, fs, directory);
				}
			}).catch(function (err) {
				if (err.code !== 'ENOENT') {
					throw err;
				}
				// directory does not exist
				return true; // can create the project here (or at least attempt to.)
			});
		}
	}, {
		key: '_checkDirectoryIsEmpty',
		value: function _checkDirectoryIsEmpty(site, fs, directory) {
			var readdir = promisify(fs.readdir);
			// check if the directory is empty
			return readdir(directory).then(function (files) {
				if (files.length) {
					// there are files
					return site.notifyDirectoryExists(directory);
				} else {
					return true; // no files, just create the library there
				}
			});
		}
	}], [{
		key: 'templateFile',
		value: function templateFile(name) {
			return _path2.default.join(__dirname, 'templates', 'project', name);
		}
	}]);

	return ProjectInitCommand;
}(_command.Command);