#!/usr/bin/env node

/*
	TODO (mirande):
	+ add proper CLI support via yargs
*/
/*eslint no-console:0*/
const { promisify } = require('util');
const read = promisify(require('read'));
const { execSync } = require('child_process');
const argv = require('yargs-parser')(process.argv.slice(2));
const { table } = require('table');
const files = ['package.json', 'npm-shrinkwrap.json'].join(' ');


(async () => {
	let exclude = csvToArray(argv.exclude);
	let include = csvToArray(argv.include);

	console.log(':::: Checking for outdated dependencies');

	let modules = getOutdatedModules({ include, exclude });

	if (!modules.length){
		console.log(':::: No updates required!');
		return process.exit();
	}

	console.log(':::: Dependencies to update:\n');
	console.log(formatOutdatedTable(modules));

	const proceed = await read({ prompt: ':::: proceed [y/n]?', default: 'y' });

	if (proceed.toLowerCase() !== 'y'){
		console.log(':::: bye!');
		return process.exit();
	}
	modules.forEach(m => {
		const message = getCommitMessage(m);

		updateModule(m);

		if (!argv.skipTests){
			runTests();
		}

		stage(files);
		commit(message);
	});

	console.log(`:::: Success! Updated ${modules.length} modules`);
})();


function csvToArray(x){
	if (!x){
		return;
	}
	return x.split(',').map(x => x);
}

function getOutdatedModules({ include = [], exclude = [] } = {}){
	let outdated;

	try {
		execSync('npm outdated --json');
	} catch ({ stdout }){
		// b/c `outdated` exit code is 1 unless there are no updates available
		outdated = stdout.toString();
	}

	if (!outdated){
		return [];
	}

	try {
		outdated = JSON.parse(outdated);
	} catch (error){
		console.error(':::: Unable to parse output of `npm outdated`!', error);
		return process.exit(1);
	}

	return Object.keys(outdated)
		.map(name => {
			const module = outdated[name];
			return Object.assign({}, module, { name });
		})
		.filter(m => m.current !== m.wanted)
		.filter(m => include.length ? include.includes(m.name) : true)
		.filter(m => exclude.length ? !exclude.includes(m.name) : true);
}

function updateModule(module){
	const { name } = module;

	console.log(`\n:::: Updating module: ${name}`);

	try {
		execSync(`npm update ${name} --silent`);
	} catch (error){
		console.error(`:::: Unable to update module ${name}`, error);
		return process.exit(1);
	}

	console.log(`:::: Successfully updated module: ${name}`);
}

function runTests(){
	console.log(':::: Running tests');

	try {
		execSync('npm test', { stdio: ['ignore', 'ignore', 'pipe'] });
	} catch (error){
		console.error(':::: Tests failed', error.message);
		return process.exit(1);
	}

	console.log(':::: Tests passed!');
}

function stage(files){
	console.log(`:::: Staging files: ${files}`);

	try {
		execSync(`git add ${files}`);
	} catch (error){
		console.error(`:::: Unable to stage ${files}`, error);
		return process.exit(1);
	}

	console.log(`:::: Successfully staged files: ${files}`);
}

function commit(message){
	console.log(`:::: Committing changes: ${message}`);

	try {
		execSync(`git commit -m "${message}"`);
	} catch (error){
		console.error(`:::: Unable to commit: ${message}`, error);
		return process.exit(1);
	}

	console.log(`:::: Successfully committed changes: ${message}`);
}

function getCommitMessage({ name, wanted }){
	return `update ${name} to v${wanted}`;
}

function formatOutdatedTable(modules){
	const headerRow = ['package', 'current', 'wanted', 'latest'].map(x => x.toUpperCase());
	const dataRows = modules.map(m => [m.name, m.current, m.wanted, m.latest]);
	return table([headerRow].concat(dataRows));
}
