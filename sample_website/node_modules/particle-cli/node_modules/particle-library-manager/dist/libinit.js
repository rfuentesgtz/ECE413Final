'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.LibraryInitGeneratorMixin = undefined;

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.buildLibraryInitGeneratorClass = buildLibraryInitGeneratorClass;

var _validation = require('./validation');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Copyright (c) 2016 Particle Industries, Inc.  All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is free software; you can redistribute it and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                modify it under the terms of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License as published by the Free Software Foundation, either
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                version 3 of the License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Lesser General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                You should have received a copy of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License along with this program; if not, see <http://www.gnu.org/licenses/>.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var path = require('path');

function lowercaseFirstLetter(string) {
	return string.charAt(0).toLowerCase() + string.slice(1);
}

function capitalizeFirstLetter(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}

/**
 * Formats a message from the validation error.
 * @param {object} v    The result from a validateField call.
 * @returns {string}    The error message string
 */
function validationMessage(v) {
	return v.field + ': ' + v.errors[v.field];
}

function validationError(validation) {
	var msg = [];
	for (var idx in validation) {
		var v = validation[idx];
		var m = validationMessage(v);
		msg.push(m);
	}
	var error = new Error(msg);
	error.validate = validation;
	return error;
}

/**
 * Code the functionality separate from the generator so we can mock the various
 * generator operations - having to subclass Base binds the functionality too closely
 * to the generator.
 *
 * @param {class} B The base class to use for the mixin
 * @returns {LibraryInitGeneratorMixin} The mixin class with B as the base.
 */
var LibraryInitGeneratorMixin = exports.LibraryInitGeneratorMixin = function LibraryInitGeneratorMixin(B) {
	return function (_B) {
		_inherits(_class, _B);

		function _class() {
			var _ref;

			_classCallCheck(this, _class);

			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			return _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))); /* istanbul ignore next: coverage bug? */
		}

		/**
   * Registers the option names.
   * @private
   * @returns {undefined} nothing
   */


		_createClass(_class, [{
			key: '_initializeOptions',
			value: function _initializeOptions() {
				this.argument('name', { type: String, required: false });
				this.argument('version', { type: String, required: false });
				this.argument('year', { type: Number, required: false });
				this.argument('dir', { type: String, required: false });
			}
		}, {
			key: '_setYear',
			value: function _setYear() {
				var currentDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();

				if (this.options.year === undefined) {
					this.options.year = currentDate.getFullYear();
				}
			}
		}, {
			key: '_setOutputDir',
			value: function _setOutputDir() {
				if (this.options.dir !== undefined) {
					this.destinationRoot(this.options.dir);
				}
			}
		}, {
			key: '_promptValidate',
			value: function _promptValidate(field, value) {
				var result = this._validateField(field, value);
				if (!result || result.valid) {
					return true;
				}
				return validationMessage(result);
			}
		}, {
			key: '_allPrompts',
			value: function _allPrompts() {
				var _this2 = this;

				var prompt = [];

				if (this.options.name === undefined) {
					prompt.push({
						type: 'input',
						name: 'name',
						message: 'Enter a name for your library:',
						validate: function validate(value) {
							return _this2._promptValidate('name', value);
						}
					});
				}

				if (this.options.version === undefined) {
					prompt.push({
						type: 'input',
						name: 'version',
						message: 'Enter a version for your library:',
						validate: function validate(value) {
							return _this2._promptValidate('version', value);
						}
					});
				}

				if (this.options.author === undefined) {
					prompt.push({
						type: 'input',
						name: 'author',
						message: 'Who is the author of your library:',
						validate: function validate(value) {
							return _this2._promptValidate('author', value);
						}
					});
				}

				return prompt;
			}

			/**
    * Handle the result of prompts.
    * @param {object} data The result of the prompts.
    * @private
    * @returns {undefined} nothing
    */

		}, {
			key: '_handlePrompts',
			value: function _handlePrompts(data) {
				Object.assign(this.options, data);
				if (this.options.name) {
					this.options.name_code = lowercaseFirstLetter(this.options.name.replace(/[^a-zA-Z0-9_]/g, ''));
					this.options.Name_code = capitalizeFirstLetter(this.options.name_code);
				}
				this._checkFields();
			}
		}, {
			key: '_checkFields',
			value: function _checkFields() {
				var result = this._validate();
				if (result.length) {
					throw validationError(result);
				}
			}
		}, {
			key: '_validate',
			value: function _validate() {
				var options = ['name', 'version', 'author'];
				var result = [];
				for (var idx in options) {
					var check = this._validateOption(options[idx]);
					if (check && !check.valid) {
						result.push(check);
					}
				}
				return result;
			}
		}, {
			key: '_validateOption',
			value: function _validateOption(attribute) {
				var value = this.options[attribute];
				if (value !== undefined && value !== null) {
					return this._validateField(attribute, value.toString());
				}
				return null;
			}
		}, {
			key: '_validateField',
			value: function _validateField(field, value) {
				return (0, _validation.validateField)(field, value);
			}
		}, {
			key: '_prompt',
			value: function _prompt() {
				var _this3 = this;

				this._setYear();
				this._setOutputDir();
				var prompt = this._allPrompts();
				return this.prompt(prompt).then(function (data) {
					return _this3._handlePrompts(data);
				});
			}
		}, {
			key: 'prompting',
			get: function get() {
				return {
					prompt: this._prompt
				};
			}
		}, {
			key: 'writing',
			get: function get() {
				return {
					libraryProperties: function libraryProperties() {
						this.fs.copyTpl(this.templatePath('library.properties'), this.destinationPath('library.properties'), this.options);

						this.fs.copyTpl(this.templatePath('README.md'), this.destinationPath('README.md'), this.options);

						this.fs.copyTpl(this.templatePath('LICENSE'), this.destinationPath('LICENSE'), this.options);

						var filename = 'src/' + this.options.name + '.cpp';
						this.fs.copyTpl(this.templatePath('src/library.cpp'), this.destinationPath(filename), this.options);

						this.fs.copyTpl(this.templatePath('src/library.h'), this.destinationPath('src/' + this.options.name + '.h'), this.options);

						this.fs.copyTpl(this.templatePath('examples/usage/usage.ino'), this.destinationPath('examples/usage/usage.ino'), this.options);
					}
				};
			}
		}]);

		return _class;
	}(B);
};

function buildLibraryInitGeneratorClass() {
	var gen = require('yeoman-generator');

	function sourceRoot() {
		return path.join(__dirname, 'init', 'templates');
	}

	/**
  * Yeoman generator that provides library initialize
  * functionality to create a new library in the file system.
  *
  */

	var LibraryInitGenerator = function (_LibraryInitGenerator) {
		_inherits(LibraryInitGenerator, _LibraryInitGenerator);

		// eslint-disable-line new-cap

		function LibraryInitGenerator() {
			var _ref2;

			_classCallCheck(this, LibraryInitGenerator);

			for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				args[_key2] = arguments[_key2];
			}

			/* istanbul ignore next: coverage bug? */
			var _this4 = _possibleConstructorReturn(this, (_ref2 = LibraryInitGenerator.__proto__ || Object.getPrototypeOf(LibraryInitGenerator)).call.apply(_ref2, [this].concat(args)));

			_this4.sourceRoot(sourceRoot());
			_this4._initializeOptions();
			_this4._checkFields();
			return _this4;
		}

		// It looks like yeoman is expecting the getters specifically on this
		// rather than on super.


		_createClass(LibraryInitGenerator, [{
			key: 'prompting',
			get: function get() {
				return _get(LibraryInitGenerator.prototype.__proto__ || Object.getPrototypeOf(LibraryInitGenerator.prototype), 'prompting', this);
			}
		}, {
			key: 'writing',
			get: function get() {
				return _get(LibraryInitGenerator.prototype.__proto__ || Object.getPrototypeOf(LibraryInitGenerator.prototype), 'writing', this);
			}
		}]);

		return LibraryInitGenerator;
	}(LibraryInitGeneratorMixin(gen));

	// provide the directory unambiguously for external tests since npm link and other
	// packaging tricks can mean external code can end up using the wrong directory


	LibraryInitGenerator.sources = sourceRoot();

	return LibraryInitGenerator;
}

// keep all branches  of the ES6 transpilled code executed
/* istanbul ignore next: not executed on node 7 */

exports.default = function () {};