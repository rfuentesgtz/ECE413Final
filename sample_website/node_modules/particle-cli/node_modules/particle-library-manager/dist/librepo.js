'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.AbstractLibraryRepository = exports.AbstractLibrary = exports.MemoryLibraryFile = exports.LibraryFile = exports.Library = exports.LibraryRepository = exports.LibraryFormatError = exports.LibraryNotFoundError = exports.LibraryRepositoryError = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _verror = require('verror');

var _verror2 = _interopRequireDefault(_verror);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Copyright (c) 2016 Particle Industries, Inc.  All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is free software; you can redistribute it and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                modify it under the terms of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License as published by the Free Software Foundation, either
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                version 3 of the License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Lesser General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                You should have received a copy of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License along with this program; if not, see <http://www.gnu.org/licenses/>.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/*
 * Welcome To
 *
 *    dP       oodP                                       8888ba.88ba
 *    88         88                                       88  `8b  `8b
 *    88       dP88d888b.88d888b.d8888b.88d888b.dP    dP  88   88   88.d8888b.88d888b..d8888b..d8888b..d8888b.88d888b.
 *    88       8888'  `8888'  `888'  `8888'  `8888    88  88   88   8888'  `8888'  `8888'  `8888'  `8888ooood888'  `88
 *    88       8888.  .8888     88.  .8888      88.  .88  88   88   8888.  .8888    8888.  .8888.  .8888.  ...88
 *    88888888PdP88Y8888'dP     `88888P8dP      `8888P88  dP   dP   dP`88888P8dP    dP`88888P8`8888P88`88888P'dP
 *                                                   .88                                           .88
 *                                               d8888P                                        d8888P
 */

/**
 * Base class of errors from a library repository.
 */
var LibraryRepositoryError = exports.LibraryRepositoryError = function (_VError) {
	_inherits(LibraryRepositoryError, _VError);

	function LibraryRepositoryError(repo) {
		var _ref;

		_classCallCheck(this, LibraryRepositoryError);

		for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			others[_key - 1] = arguments[_key];
		}

		var _this = _possibleConstructorReturn(this, (_ref = LibraryRepositoryError.__proto__ || Object.getPrototypeOf(LibraryRepositoryError)).call.apply(_ref, [this].concat(others)));

		_this.repo = repo;
		_this.name = 'LibraryRepositoryError';
		return _this;
	}

	return LibraryRepositoryError;
}(_verror2.default);

function notFound(repo, library) {
	return 'library \'' + library + '\' not found in repo \'' + repo + '\'.';
}

var LibraryNotFoundError = exports.LibraryNotFoundError = function (_LibraryRepositoryErr) {
	_inherits(LibraryNotFoundError, _LibraryRepositoryErr);

	function LibraryNotFoundError(repo, library) {
		var _ref2;

		_classCallCheck(this, LibraryNotFoundError);

		for (var _len2 = arguments.length, others = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
			others[_key2 - 2] = arguments[_key2];
		}

		var _this2 = _possibleConstructorReturn(this, (_ref2 = LibraryNotFoundError.__proto__ || Object.getPrototypeOf(LibraryNotFoundError)).call.apply(_ref2, [this, repo].concat(others, [notFound(repo, library)])));

		_this2.library = library;
		_this2.name = 'LibraryNotFoundError';
		return _this2;
	}

	return LibraryNotFoundError;
}(LibraryRepositoryError);

var LibraryFormatError = exports.LibraryFormatError = function (_LibraryRepositoryErr2) {
	_inherits(LibraryFormatError, _LibraryRepositoryErr2);

	function LibraryFormatError(repo, library) {
		var _ref3;

		_classCallCheck(this, LibraryFormatError);

		for (var _len3 = arguments.length, others = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
			others[_key3 - 2] = arguments[_key3];
		}

		var _this3 = _possibleConstructorReturn(this, (_ref3 = LibraryFormatError.__proto__ || Object.getPrototypeOf(LibraryFormatError)).call.apply(_ref3, [this, repo].concat(others)));

		_this3.library = library;
		_this3.name = 'LibraryFormatError';
		return _this3;
	}

	return LibraryFormatError;
}(LibraryRepositoryError);

/**
 * Describes a library repository. A repository provides access to named libraries.
 * Each library name is unique within the repository.
 */


var LibraryRepository = exports.LibraryRepository = function () {
	function LibraryRepository() {
		_classCallCheck(this, LibraryRepository);
	}

	_createClass(LibraryRepository, [{
		key: 'fetch',

		/**
   *
   * @param {String} name  The name of the library to retrieve.
   * @returns {Promise.<Library>} The library corresponding to the name, or
   * LibraryNotFoundError if the library doesn't exist.
   */
		value: function fetch(name) {
			return Promise.reject(new LibraryNotFoundError(this, name));
		}

		/**
   * Retrieves a list of known library names
   * @returns {Promise.<Array>}   The library names in this repository.
   */

	}, {
		key: 'names',
		value: function names() {
			return Promise.resolve([]);
		}
	}]);

	return LibraryRepository;
}();

/**
 * Describes a library. The library is uniquely identified by it's name.
 */


var Library = exports.Library = function () {
	function Library(name) {
		_classCallCheck(this, Library);

		this._name = name;
	}

	_createClass(Library, [{
		key: 'definition',


		/**
   * Retrieves the definition (metadata) for this library.
   * @returns {Promise}   The metadata for this library.
   */
		value: function definition() {
			return Promise.reject(new LibraryNotFoundError('not implemented'));
		}

		/**
   * A promise of the library files available.
   * @returns {Promise.<Array>}   The files that make up this library.
   */

	}, {
		key: 'files',
		value: function files() {
			return Promise.resolve([]);
		}
	}, {
		key: 'name',
		get: function get() {
			return this._name;
		}
	}]);

	return Library;
}();

var LibraryFile = exports.LibraryFile = function () {
	function LibraryFile(name, kind, extension) {
		_classCallCheck(this, LibraryFile);

		this.name = name;
		this.kind = kind;
		this.extension = extension;
	}

	_createClass(LibraryFile, [{
		key: 'content',
		value: function content(stream) {
			return new Promise(function (fulfill, reject) {
				stream.end();
				fulfill(stream);
			});
		}
	}]);

	return LibraryFile;
}();

var MemoryLibraryFile = exports.MemoryLibraryFile = function (_LibraryFile) {
	_inherits(MemoryLibraryFile, _LibraryFile);

	/* istanbul ignore next */
	function MemoryLibraryFile(name, kind, extension, content, id) {
		_classCallCheck(this, MemoryLibraryFile);

		var _this4 = _possibleConstructorReturn(this, (MemoryLibraryFile.__proto__ || Object.getPrototypeOf(MemoryLibraryFile)).call(this, name, kind, extension));

		_this4.string_content = content;
		_this4.id = id;
		return _this4;
	}

	/**
  *
  * @param {Writable} stream receives the streamed content.
  * @returns {None} nothing
  */


	_createClass(MemoryLibraryFile, [{
		key: 'content',
		value: function content(stream) {
			var _this5 = this;

			var Readable = require('stream').Readable;
			var rs = new Readable();
			rs._read = function () {
				rs.push(_this5.string_content);
				rs.push(null);
			};
			rs.pipe(stream);
		}
	}]);

	return MemoryLibraryFile;
}(LibraryFile);

/**
 * Abstract class provides properties for the associated repo, name and metadata.
 * It delegates to the repo to retrieve the associated descriptor and files.
 * Calls `definition(id,name)` and `files(id,name)` on the repo to retrieve the data
 * for the library data. The results of these are then passed to template methods
 * `processDefinition()` and `processFiles()`.
 */


var AbstractLibrary = exports.AbstractLibrary = function (_Library) {
	_inherits(AbstractLibrary, _Library);

	function AbstractLibrary(name, metadata, repo) {
		_classCallCheck(this, AbstractLibrary);

		var _this6 = _possibleConstructorReturn(this, (AbstractLibrary.__proto__ || Object.getPrototypeOf(AbstractLibrary)).call(this, name)); /* istanbul ignore next */


		_this6.metadata = metadata;
		_this6.repo = repo;
		_this6.cache = { definition: undefined, files: undefined };
		return _this6;
	}

	_createClass(AbstractLibrary, [{
		key: 'definition',
		value: function definition() {
			var _this7 = this;

			return new Promise(function (fulfill, rejected) {
				if (!_this7.cache.definition) {
					return _this7.repo.definition(_this7).then(function (defn) {
						_this7.cache.definition = defn;
						fulfill(_this7.processDefinition(defn));
					}).catch(function (error) {
						return rejected(error);
					});
				}
				fulfill(_this7.cache.definition);
			});
		}
	}, {
		key: 'files',
		value: function files() {
			var _this8 = this;

			return new Promise(function (fulfill, rejected) {
				if (!_this8.cache.files) {
					return _this8.repo.files(_this8).then(function (files) {
						_this8.cache.files = files;
						fulfill(_this8.processFiles(files));
					}).catch(function (error) {
						return rejected(error);
					});
				}
				fulfill(_this8.cache.files);
			});
		}
	}, {
		key: 'processDefinition',
		value: function processDefinition(def) {
			return def;
		}
	}, {
		key: 'processFiles',
		value: function processFiles(files) {
			return files;
		}
	}]);

	return AbstractLibrary;
}(Library);

/**
 * Provides the base contract required by the AbstractLibrary.
 */


var AbstractLibraryRepository = exports.AbstractLibraryRepository = function (_LibraryRepository) {
	_inherits(AbstractLibraryRepository, _LibraryRepository);

	function AbstractLibraryRepository() {
		_classCallCheck(this, AbstractLibraryRepository);

		return _possibleConstructorReturn(this, (AbstractLibraryRepository.__proto__ || Object.getPrototypeOf(AbstractLibraryRepository)).apply(this, arguments));
	}

	_createClass(AbstractLibraryRepository, [{
		key: 'files',


		/**
   * @param {AbstractLibrary} lib The library to retrieve files for
   * @returns {Array.<LibraryFile>}   The files for the library.
   */
		value: function files(lib) {
			return Promise.resolve([]);
		}

		/**
   *
   * @param {AbstractLibrary} lib The library to retrieve the definition for.
   * @returns {*} The object definition.
   */

	}, {
		key: 'definition',
		value: function definition(lib) {
			return Promise.resolve({ name: lib.name });
		}
	}, {
		key: 'extractNames',
		value: function extractNames(libs) {
			var result = [];
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = libs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var lib = _step.value;

					var name = this.extractName(lib);
					result.push(name);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			return result;
		}
	}, {
		key: 'extractName',
		value: function extractName(lib) {
			return lib.name;
		}
	}]);

	return AbstractLibraryRepository;
}(LibraryRepository);