'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.BuildLibraryRepository = exports.BuildLibrary = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _librepo = require('./librepo');

var _Agent = require('particle-api-js/lib/Agent');

var _Agent2 = _interopRequireDefault(_Agent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ******************************************************************************
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Copyright (c) 2016 Particle Industries, Inc.  All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is free software; you can redistribute it and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                modify it under the terms of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License as published by the Free Software Foundation, either
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                version 3 of the License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Lesser General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                You should have received a copy of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License along with this program; if not, see <http://www.gnu.org/licenses/>.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * A library retrieved from the Build repo.
 * The metadata should include the ID
 */
var BuildLibrary = exports.BuildLibrary = function (_AbstractLibrary) {
	_inherits(BuildLibrary, _AbstractLibrary);

	function BuildLibrary(name, metadata, id, repo) {
		_classCallCheck(this, BuildLibrary);

		var _this = _possibleConstructorReturn(this, (BuildLibrary.__proto__ || Object.getPrototypeOf(BuildLibrary)).call(this, name, metadata, repo));

		if (id === undefined || id.length < 1) {
			throw new _librepo.LibraryFormatError(_this.repo, name, 'no id');
		}
		_this.id = id;
		return _this;
	}

	_createClass(BuildLibrary, [{
		key: 'processFiles',
		value: function processFiles(files) {
			return this.tabsToFiles(files);
		}
	}, {
		key: 'tabsToFiles',
		value: function tabsToFiles(tabs) {
			var files = [];
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var tab = _step.value;

					files.push(this.tabToFile(tab));
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			return files;
		}

		/**
   * Creates a new LibraryFile for the given tab object.
   * @param {object} tab A tab from Build. Expected properties are title, kind, extension,
   *  content and id.
   * @returns {LibraryFile} the library file for the tab.
   */

	}, {
		key: 'tabToFile',
		value: function tabToFile(tab) {
			return new _librepo.MemoryLibraryFile(tab.title, tab.kind, tab.extension, tab.content, tab.id);
		}
	}]);

	return BuildLibrary;
}(_librepo.AbstractLibrary);

/**
 * A library repository that fetches its content via the Build library endpoint.
 */


var BuildLibraryRepository = exports.BuildLibraryRepository = function (_AbstractLibraryRepos) {
	_inherits(BuildLibraryRepository, _AbstractLibraryRepos);

	/**
  * @param {String} endpoint The root of the library API.
  */
	function BuildLibraryRepository(_ref) {
		var endpoint = _ref.endpoint;

		_classCallCheck(this, BuildLibraryRepository);

		var _this2 = _possibleConstructorReturn(this, (BuildLibraryRepository.__proto__ || Object.getPrototypeOf(BuildLibraryRepository)).call(this));

		_this2.endpoint = endpoint;
		_this2.agent = new _Agent2.default();
		_this2.root = 'libs';
		_this2.dot_json = '.json';
		return _this2;
	}

	_createClass(BuildLibraryRepository, [{
		key: 'fetch',
		value: function fetch(name) {
			var _this3 = this;

			return this.get(this.root + this.dot_json, { name: name }).then(function (libs) {
				return _this3._buildLibrary(name, libs);
			});
		}
	}, {
		key: '_buildLibrary',
		value: function _buildLibrary(name, libs) {
			if (libs.length !== 1) {
				throw new _librepo.LibraryNotFoundError(this, name);
			}
			var metadata = libs[0];
			return this._createLibrary(name, metadata);
		}
	}, {
		key: '_createLibrary',
		value: function _createLibrary(name, metadata) {
			return new BuildLibrary(name, metadata, metadata.id, this);
		}
	}, {
		key: 'names',
		value: function names() {
			var _this4 = this;

			return this.index().then(function (libs) {
				return _this4.extractNames(libs);
			});
		}
	}, {
		key: 'extractName',
		value: function extractName(lib) {
			return lib.title;
		}

		/**
   * Fetches the library index from the endpoint.
   * @returns {Array} of library metadata. The format is specific to the version of the library.
   */

	}, {
		key: 'index',
		value: function index() {
			return this.get(this.root + this.dot_json);
		}
	}, {
		key: 'get',
		value: function get(resource, args) {
			return this.agent.get(this.qualify(resource), undefined, args).then(function (result) {
				return result.body;
			});
		}
	}, {
		key: 'qualify',
		value: function qualify(uri) {
			return this.endpoint + uri;
		}
	}, {
		key: 'files',
		value: function files(lib) {
			var id = this.libraryId(lib);
			return this.get(this.root + '/' + id + '/tabs.json');
		}

		/**
   * Retrieves an object descriptor corresponding to the 'spark.json' file for the library.
   * @param {AbstractLibrary} lib    The library
   * @returns {Promise<Object>} The library definition.
   */

	}, {
		key: 'definition',
		value: function definition(lib) {
			var id = this.libraryId(lib);
			return this.get(this.root + '/' + id + '/definition.json');
		}
	}, {
		key: 'libraryId',
		value: function libraryId(lib) {
			return lib.id;
		}
	}]);

	return BuildLibraryRepository;
}(_librepo.AbstractLibraryRepository);