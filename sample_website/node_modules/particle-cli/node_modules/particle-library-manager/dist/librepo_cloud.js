'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.CloudLibraryRepository = exports.CloudLibrary = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _particleApiJs = require('particle-api-js');

var _particleApiJs2 = _interopRequireDefault(_particleApiJs);

var _librepo = require('./librepo');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ******************************************************************************
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Copyright (c) 2016 Particle Industries, Inc.  All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is free software; you can redistribute it and/or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                modify it under the terms of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License as published by the Free Software Foundation, either
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                version 3 of the License, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Lesser General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                You should have received a copy of the GNU Lesser General Public
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                License along with this program; if not, see <http://www.gnu.org/licenses/>.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var tar = require('tar-stream');
var gunzip = require('gunzip-maybe');
var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var promisify = require('es6-promisify');

/**
 * A library retrieved from the cloud.
 */

var CloudLibrary = exports.CloudLibrary = function (_AbstractLibrary) {
	_inherits(CloudLibrary, _AbstractLibrary);

	function CloudLibrary(name, metadata, repo) {
		_classCallCheck(this, CloudLibrary);

		return _possibleConstructorReturn(this, (CloudLibrary.__proto__ || Object.getPrototypeOf(CloudLibrary)).call(this, name, metadata, repo));
	}

	// processFiles(files) {
	// 	return this.tabsToFiles(files);
	// }
	//
	// tabsToFiles(tabs) {
	// 	const files = [];
	// 	for (let tab of tabs) {
	// 		files.push(this.tabToFile(tab));
	// 	}
	// 	return files;
	// }
	//
	// /**
	//  * Creates a new LibraryFile for the given tab object.
	//  * @param {object} tab A tab from Build. Expected properties are title, kind, extension,
	//  *  content and id.
	//  * @returns {LibraryFile} the library file for the tab.
	//  */
	// tabToFile(tab) {
	// 	return new MemoryLibraryFile(tab.title, tab.kind, tab.extension, tab.content, tab.id);
	// }


	_createClass(CloudLibrary, [{
		key: 'copyTo',
		value: function copyTo(dir) {
			var _this2 = this;

			var self = this;
			return promisify(mkdirp)(dir).then(function () {
				return _this2.metadata.download();
			}).then(function (buffer) {
				var Readable = require('stream').Readable;
				var read = new Readable();
				read._read = function () {
					read.push(buffer);
					read.push(null);
				};
				return new Promise(function (fulfill, reject) {
					var extract = tar.extract();

					// for some reason this function doesn't get tracked for coverage
					/* istanbul ignore next */
					function handleEntry(header, stream, callback) {
						function createDir(dir, callback) {
							mkdirp(dir, function (err) {
								if (err) {
									reject(err);
								} else {
									callback();
								}
							});
						}

						// header is the tar header
						// stream is the content body (might be an empty stream)
						// call next when you are done with this entry
						var fqname = path.join(dir, header.name);

						if (header.type === 'directory') {
							createDir(fqname, callback);
						} else if (header.type === 'file') {
							createDir(path.dirname(fqname), function () {
								var write = fs.createWriteStream(fqname);
								write.on('open', function () {
									write.on('error', reject);
									stream.pipe(write);
									stream.on('end', function () {
										callback(); // ready for next entry
									});
								});
							});
						} else {
							stream.resume();
							callback();
						}
					}

					extract.on('entry', handleEntry);
					extract.on('finish', fulfill);
					read.pipe(gunzip()).pipe(extract);
				}).then(function () {
					return self;
				});
			});
		}
	}]);

	return CloudLibrary;
}(_librepo.AbstractLibrary);

/**
 * A library repository that fetches its content Particle Library endpoint.
 */


var CloudLibraryRepository = exports.CloudLibraryRepository = function (_AbstractLibraryRepos) {
	_inherits(CloudLibraryRepository, _AbstractLibraryRepos);

	/**
  * @param {String} endpoint The root of the library API.
  */
	function CloudLibraryRepository(_ref) {
		var _ref$auth = _ref.auth,
		    auth = _ref$auth === undefined ? undefined : _ref$auth,
		    _ref$client = _ref.client,
		    client = _ref$client === undefined ? new _particleApiJs2.default().client({ auth: auth }) : _ref$client;

		_classCallCheck(this, CloudLibraryRepository);

		var _this3 = _possibleConstructorReturn(this, (CloudLibraryRepository.__proto__ || Object.getPrototypeOf(CloudLibraryRepository)).call(this));

		_this3.api = client.api;
		_this3.client = client;
		_this3.auth = auth;
		_this3.api.debug = console.log; // eslint-disable-line no-console
		return _this3;
	}

	_createClass(CloudLibraryRepository, [{
		key: '_getLibrary',
		value: function _getLibrary(name, version) {
			var query = version ? { version: version } : undefined;
			return this.client.library(name, query);
		}
	}, {
		key: 'fetch',
		value: function fetch(name, version) {
			var _this4 = this;

			return this._getLibrary(name, version).then(function (lib) {
				return _this4._createLibrary(name, lib);
			});
		}
	}, {
		key: '_createLibrary',
		value: function _createLibrary(name, metadata) {
			return new CloudLibrary(name, metadata, this);
		}
	}, {
		key: 'names',
		value: function names() {
			var _this5 = this;

			return this.index().then(function (libs) {
				return _this5.extractNames(libs);
			});
		}

		/**
   * Fetches the library index from the endpoint.
   * @returns {Array} of library metadata. The format is specific to the version of the library.
   */

	}, {
		key: 'index',
		value: function index() {
			return this.client.libraries();
		}

		/**
   * Retrieves an object descriptor corresponding to the 'library.properties' file for the library.
   * @param {AbstractLibrary} lib    The library
   * @returns {Promise<Object>} The library definition.
   */

	}, {
		key: 'definition',
		value: function definition(lib) {
			return Promise.resolve(lib.metadata);
		}

		/*
  extension(name) {
  	const idx = name.lastIndexOf('.');
  	return idx>=0 ? [name.substring(idx+1), name.substring(0,idx)] : ['', name];
  }
  	files(lib) {
  	return this.api.getLibraryFiles({auth: this.auth, name: lib.name}).then(files => {
  		return files.body.map((file) => {
  				const path = require('path');
  			const filename = file.path;
  			const basename = path.basename(filename);
  			const extension = path.extname(basename);
  			// remove the leading dot
  				const stem = path.basename(basename, extension);
  			let dir = path.dirname(filename);
  			let dirs = dir.split('/');
  			if (dirs[0]==='firmware') {   // migrate to v2 format :-)
  				dirs[0] = 'src';
  			}
  				if (dirs[1]==='examples') {      // move firmware/examples to ./examples
  				dirs = ['examples'];
  			}
  			dir = dirs.join('/');
  			const noext = path.join(dir, stem);
  			// hard-code to source so that the fs filesystem includes the file
  			return new MemoryLibraryFile(noext, 'source', extension.substring(1), file.content, undefined);
  		}).filter(item => item!==null);
  	});
  }
  */

	}]);

	return CloudLibraryRepository;
}(_librepo.AbstractLibraryRepository);